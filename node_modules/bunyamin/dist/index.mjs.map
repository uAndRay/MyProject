{"version":3,"file":"index.mjs","sources":["../src/decorator/categories/deflateCategories.ts","../src/decorator/categories/inflateCategories.ts","../src/decorator/categories/mergeCategories.ts","../src/is-debug/createIsDebug.ts","../src/is-debug/index.ts","../src/utils/isActionable.ts","../src/utils/isError.ts","../src/utils/isPromiseLike.ts","../src/utils/isObject.ts","../src/utils/isUndefined.ts","../src/decorator/message-stack/MessageStack.ts","../src/decorator/StackTraceError.ts","../src/decorator/Bunyamin.ts","../src/noopLogger/noopLogger.ts","../src/thread-groups/ThreadGroups.ts","../src/realm.ts","../src/streams/bunyan-trace-event/threads/ThreadDispatcher.ts","../src/streams/bunyan-trace-event/threads/ThreadGroupDispatcher.ts","../src/streams/bunyan-trace-event/bunyan2trace/bunyan2trace.ts","../src/streams/bunyan-trace-event/StreamEventBuilder.ts","../src/streams/bunyan-trace-event/options/normalizeOptions.ts","../src/streams/bunyan-trace-event/BunyanTraceEventStream.ts","../src/streams/jsonl/jsonlReadFile.ts","../src/streams/jsonl/jsonlWriteFile.ts","../src/streams/trace-merge/resolvers/tree/abstract/ArrayTreeNode.ts","../src/streams/trace-merge/resolvers/tree/abstract/RangeTreeNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/FileNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/PIDNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/RootNode.ts","../src/streams/trace-merge/resolvers/PIDResolver.ts","../src/streams/trace-merge/resolvers/FilePIDResolver.ts","../src/streams/trace-merge/transforms/multisort.ts","../src/streams/trace-merge/transforms/TraceAnalyze.ts","../src/streams/trace-merge/transforms/TraceMerge.ts","../src/streams/trace-merge/traceMerge.ts","../src/traceEventStream.ts","../src/uniteTraceEvents.ts","../src/wrapLogger.ts","../src/index.ts"],"sourcesContent":["export function deflateCategories(cat: unknown): string | undefined {\n  if (!cat) {\n    return undefined;\n  }\n\n  if (Array.isArray(cat)) {\n    return cat.filter(Boolean).join(',');\n  }\n\n  return String(cat);\n}\n","export function inflateCategories(cat: unknown): string[] {\n  if (!cat) {\n    return [];\n  }\n\n  if (Array.isArray(cat)) {\n    return cat;\n  }\n\n  return String(cat).split(',');\n}\n","import { inflateCategories } from './inflateCategories';\n\nexport function mergeCategories(left: string[] | undefined, right: unknown): string[] | undefined {\n  if (!left || !right) {\n    if (left) return left;\n    if (right) return inflateCategories(right);\n    return undefined;\n  }\n\n  const iright = inflateCategories(right);\n  const categories = left ? [...left, ...iright] : iright;\n  const uniqueCategories = new Set(categories);\n  return [...uniqueCategories.values()];\n}\n","export function createIsDebug(namespaces: string) {\n  const skips: RegExp[] = [];\n  const names: RegExp[] = [];\n\n  for (const part of namespaces.split(/[\\s,]+/)) {\n    if (!part) {\n      continue;\n    }\n\n    const destination = part[0] === '-' ? skips : names;\n    const pattern = part.replace(/^-/, '').replace(/\\*/g, '.*?');\n    destination.push(new RegExp(`^${pattern}$`));\n  }\n\n  return function isDebug(name: string): boolean {\n    // eslint-disable-next-line unicorn/prefer-at\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    if (skips.some((regex) => regex.test(name))) {\n      return false;\n    }\n\n    if (names.some((regex) => regex.test(name))) {\n      return true;\n    }\n\n    return false;\n  };\n}\n","import { createIsDebug } from './createIsDebug';\n\nexport const isDebug = createIsDebug(process.env.DEBUG || '');\n\nexport const isSelfDebug = () => isDebug('bunyamin');\n","export function isActionable<T>(value: T | (() => T)): value is () => T {\n  return typeof value === 'function';\n}\n","export function isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n","export function isPromiseLike(maybePromise: unknown): maybePromise is PromiseLike<unknown> {\n  return maybePromise ? typeof (maybePromise as PromiseLike<unknown>).then === 'function' : false;\n}\n","export function isObject(value: unknown): value is object {\n  return value ? typeof value === 'object' : false;\n}\n","export function isUndefined(x: unknown): x is undefined {\n  return x === undefined;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { ThreadID } from '../../types';\n\ntype Message = unknown[];\n\nexport type MessageStackOptions = {\n  /**\n   * A string or any other value to be used as the message when a thread\n   * is popped without any message being pushed previously.\n   * @default '<no begin message>'\n   */\n  noBeginMessage?: unknown;\n};\n\nexport class MessageStack {\n  readonly #simple = new Map<unknown, Message[]>();\n  readonly #complex = new Map<unknown, Map<unknown, Message[]>>();\n  readonly #noBeginMessage: Message;\n\n  constructor(options: MessageStackOptions = {}) {\n    this.#noBeginMessage = [options.noBeginMessage ?? '<no begin message>'];\n  }\n\n  push(tid: ThreadID | undefined, message: unknown[]): void {\n    const stack = this.#ensureStack(tid);\n    stack.push(message);\n  }\n\n  pop(tid: ThreadID | undefined): unknown[] {\n    const stack = this.#ensureStack(tid);\n    return stack.pop() ?? this.#noBeginMessage;\n  }\n\n  #ensureStack(tid: ThreadID | undefined): Message[] {\n    if (!Array.isArray(tid)) {\n      if (!this.#simple.has(tid)) {\n        this.#simple.set(tid, []);\n      }\n\n      return this.#simple.get(tid)!;\n    }\n\n    const [alias, subtid] = tid;\n    if (!this.#complex.has(alias)) {\n      this.#complex.set(alias, new Map());\n    }\n\n    const submap = this.#complex.get(alias)!;\n    if (!submap.has(subtid)) {\n      submap.set(subtid, []);\n    }\n\n    return submap.get(subtid)!;\n  }\n}\n","export class StackTraceError extends Error {\n  constructor() {\n    super('Providing stack trace below:');\n    // eslint-disable-next-line unicorn/custom-error-definition\n    this.name = 'StackTrace';\n  }\n\n  static empty() {\n    return {\n      message: '',\n      stack: '',\n    };\n  }\n}\n","import { deflateCategories, mergeCategories } from './categories';\nimport { isSelfDebug } from '../is-debug';\nimport type { ThreadGroupConfig } from '../streams';\nimport type { ThreadID } from '../types';\nimport { isActionable, isError, isObject, isPromiseLike } from '../utils';\nimport type {\n  BunyaminLogMethod,\n  BunyaminConfig,\n  BunyaminLogRecordFields as UserFields,\n  BunyanLikeLogger,\n  BunyanLogLevel,\n} from './types';\nimport { MessageStack } from './message-stack';\nimport { StackTraceError } from './StackTraceError';\n\nexport class Bunyamin<Logger extends BunyanLikeLogger = BunyanLikeLogger> {\n  public readonly fatal = this.#setupLogMethod('fatal');\n  public readonly error = this.#setupLogMethod('error');\n  public readonly warn = this.#setupLogMethod('warn');\n  public readonly info = this.#setupLogMethod('info');\n  public readonly debug = this.#setupLogMethod('debug');\n  public readonly trace = this.#setupLogMethod('trace');\n\n  readonly #fields: PredefinedFields | undefined;\n  /**\n   * All instances of {@link Bunyamin} must share the same object instance\n   */\n  readonly #shared: SharedBunyaminConfig<Logger>;\n\n  constructor(config: BunyaminConfig<Logger>, fields?: never);\n  constructor(shared: unknown, fields?: unknown) {\n    if (fields === undefined) {\n      const config = shared as BunyaminConfig<Logger>;\n\n      this.#fields = undefined;\n      this.#shared = {\n        ...config,\n        loggerPriority: 0,\n        messageStack: new MessageStack({\n          noBeginMessage: config.noBeginMessage,\n        }),\n      };\n    } else {\n      this.#fields = fields as PredefinedFields;\n      this.#shared = shared as SharedBunyaminConfig<Logger>;\n    }\n  }\n\n  /** @deprecated */\n  get threadGroups(): ThreadGroupConfig[] {\n    return [];\n  }\n\n  get logger(): Logger {\n    return this.#shared.logger;\n  }\n\n  set logger(logger: Logger) {\n    this.useLogger(logger);\n  }\n\n  useLogger(logger: Logger, priority = 0): void {\n    if (this.#shared.immutable) {\n      throw new Error('Cannot change a logger of an immutable instance');\n    }\n\n    if (this.#fields) {\n      throw new Error('Cannot change a logger of a child instance');\n    }\n\n    const { stack } = isSelfDebug() ? new StackTraceError() : StackTraceError.empty();\n    const currentPriority = this.#shared.loggerPriority;\n    if (priority >= currentPriority) {\n      this.#shared.loggerPriority = priority;\n      this.#shared.logger = logger;\n      stack &&\n        this.#shared.logger.trace(\n          { cat: 'bunyamin' },\n          `bunyamin logger changed (${priority} >= ${currentPriority}), caller was:\\n${stack}`,\n        );\n    } else {\n      stack &&\n        this.#shared.logger.trace(\n          { cat: 'bunyamin' },\n          `bunyamin logger not changed (${priority} < ${currentPriority}), caller was:\\n${stack}`,\n        );\n    }\n  }\n\n  child(overrides?: UserFields): Bunyamin<Logger> {\n    const childContext = this.#mergeFields(this.#fields, this.#transformContext(overrides));\n    return new Bunyamin(this.#shared, childContext as never);\n  }\n\n  #setupLogMethod(level: BunyanLogLevel): BunyaminLogMethod {\n    const logMethod = this.#instant.bind(this, level);\n\n    return Object.assign(logMethod, {\n      begin: this.#begin.bind(this, level),\n      complete: this.#complete.bind(this, level),\n      end: this.#end.bind(this, level),\n    }) as BunyaminLogMethod;\n  }\n\n  #begin(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry('B', arguments_);\n    this.#beginInternal(level, entry.fields, entry.message);\n  }\n\n  #beginInternal(level: BunyanLogLevel, fields: ResolvedFields, message: unknown[]): void {\n    this.#shared.messageStack.push(fields.tid, message);\n    this.#shared.logger[level](fields, ...message);\n  }\n\n  #end(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry('E', arguments_);\n    this.#endInternal(level, entry.fields, entry.message);\n  }\n\n  #endInternal(level: BunyanLogLevel, fields: ResolvedFields, customMessage: unknown[]): void {\n    const beginMessage = this.#shared.messageStack.pop(fields.tid);\n    const message = customMessage.length > 0 ? customMessage : beginMessage;\n\n    this.#shared.logger[level](fields, ...(message as unknown[]));\n  }\n\n  #instant(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry(void 0, arguments_);\n    this.#shared.logger[level](entry.fields, ...entry.message);\n  }\n\n  #complete<T>(\n    level: BunyanLogLevel,\n    maybeContext: unknown,\n    maybeMessage: unknown,\n    maybeAction: T | (() => T),\n  ): T {\n    const action = typeof maybeContext === 'string' ? (maybeMessage as T | (() => T)) : maybeAction;\n    const arguments_ = maybeAction === action ? [maybeContext, maybeMessage] : [maybeContext];\n    const { fields, message } = this.#resolveLogEntry('B', arguments_);\n\n    return this.#completeInternal(level, fields, message, action);\n  }\n\n  #completeInternal<T>(\n    level: BunyanLogLevel,\n    fields: ResolvedFields,\n    message: unknown[],\n    action: T | (() => T),\n  ): T {\n    const end = (customContext: EndContext) => {\n      const endContext = {\n        ...customContext,\n        ph: 'E',\n        tid: fields.tid,\n      } as ResolvedFields;\n\n      this.#endInternal(level, endContext, []);\n    };\n\n    let result;\n    this.#beginInternal(level, fields, message);\n    try {\n      result = isActionable(action) ? action() : action;\n\n      if (isPromiseLike(result)) {\n        result.then(\n          () => end({ success: true }),\n          (error) => end({ success: false, err: error }),\n        );\n      } else {\n        end({ success: true });\n      }\n\n      return result;\n    } catch (error: unknown) {\n      end({ success: false, err: error });\n      throw error;\n    }\n  }\n\n  #resolveLogEntry(phase: MaybePhase, arguments_: unknown[]) {\n    const userContext = isObject(arguments_[0]) ? (arguments_[0] as MaybeUserFields) : undefined;\n    const fields = this.#mergeFields(this.#fields, this.#transformContext(userContext));\n    const message: unknown[] =\n      userContext === undefined\n        ? arguments_\n        : isError(arguments_[0]) && arguments_.length === 1\n        ? [arguments_[0].message]\n        : arguments_.slice(1);\n\n    return {\n      fields: this.#resolveFields(fields, phase),\n      message,\n    };\n  }\n\n  #mergeFields(\n    left: PredefinedFields | undefined,\n    right: UserFields | undefined,\n  ): PredefinedFields {\n    const result = {\n      ...left,\n      ...right,\n    };\n\n    const cat = mergeCategories(left?.cat, right?.cat);\n    if (result.cat !== cat) {\n      result.cat = cat;\n    }\n\n    return result as PredefinedFields;\n  }\n\n  #transformContext(maybeError: UserFields | Error | undefined): UserFields | undefined {\n    const fields: UserFields | undefined = isError(maybeError) ? { err: maybeError } : maybeError;\n    return this.#shared.transformFields ? this.#shared.transformFields(fields) : fields;\n  }\n\n  #resolveFields(fields: PredefinedFields, ph: MaybePhase): ResolvedFields {\n    const result: ResolvedFields = fields as ResolvedFields;\n    if (ph !== undefined) {\n      result.ph = ph as never;\n    }\n    if (result.cat !== undefined) {\n      result.cat = deflateCategories(result.cat);\n    }\n    return result;\n  }\n}\n\ntype EndContext = {\n  success?: boolean;\n  err?: unknown;\n};\n\ntype MaybePhase = 'B' | 'E' | undefined;\n\ntype MaybeUserFields = UserFields | Error;\n\ntype PredefinedFields = UserFields & {\n  cat?: string[];\n};\n\ntype ResolvedFields = UserFields & {\n  cat?: string;\n  ph?: 'B' | 'E';\n  tid?: ThreadID;\n};\n\ntype SharedBunyaminConfig<Logger extends BunyanLikeLogger> = BunyaminConfig<Logger> & {\n  loggerPriority: number;\n  messageStack: MessageStack;\n};\n","import type { BunyanLikeLogger } from '../decorator';\n\nconst noop: any = () => {\n  /* no-op */\n};\n\nexport class NoopLogger implements BunyanLikeLogger {\n  fatal = noop;\n  error = noop;\n  warn = noop;\n  info = noop;\n  debug = noop;\n  trace = noop;\n}\n\nexport function noopLogger(_options?: any) {\n  return new NoopLogger();\n}\n","import type { Bunyamin } from '../decorator';\nimport type { ThreadGroupConfig } from '../streams';\nimport { isSelfDebug } from '../is-debug';\nimport { StackTraceError } from '../decorator/StackTraceError';\n\nexport class ThreadGroups {\n  readonly #bunyamin: Bunyamin;\n  readonly #debugMode = isSelfDebug();\n  readonly #groups = new Map<string, ThreadGroupConfig>();\n\n  constructor(bunyamin: Bunyamin) {\n    this.#bunyamin = bunyamin;\n    this.#groups = new Map();\n  }\n\n  add(group: ThreadGroupConfig) {\n    if (this.#debugMode) {\n      if (this.#groups.has(group.id)) {\n        this.#logAddition(group, 'overwritten');\n      } else {\n        this.#logAddition(group, 'added');\n      }\n    }\n\n    this.#groups.set(group.id, group);\n    return this;\n  }\n\n  [Symbol.iterator]() {\n    return this.#groups.values();\n  }\n\n  #logAddition(group: ThreadGroupConfig, action: string) {\n    const { stack } = new StackTraceError();\n    this.#bunyamin.trace(\n      { cat: 'bunyamin' },\n      `thread group ${action}: ${group.id} (${group.displayName})\\n\\n${stack}`,\n    );\n  }\n}\n","import { Bunyamin } from './decorator';\nimport { noopLogger } from './noopLogger';\nimport { isSelfDebug } from './is-debug';\nimport { ThreadGroups } from './thread-groups';\n\ntype Realm = {\n  bunyamin: Bunyamin;\n  nobunyamin: Bunyamin;\n  threadGroups: ThreadGroups;\n};\n\nfunction create() {\n  const selfDebug = isSelfDebug();\n  const bunyamin = new Bunyamin({ logger: noopLogger() });\n  const nobunyamin = new Bunyamin({\n    logger: noopLogger(),\n    immutable: true,\n  });\n  const threadGroups = new ThreadGroups(bunyamin);\n\n  if (selfDebug) {\n    bunyamin.trace({ cat: 'bunyamin' }, 'bunyamin global instance created');\n  }\n\n  return { bunyamin, nobunyamin, threadGroups };\n}\n\nfunction getCached(): Realm | undefined {\n  const result = (globalThis as any).__BUNYAMIN__;\n\n  if (isSelfDebug() && result) {\n    result.bunyamin.trace({ cat: 'bunyamin' }, 'bunyamin global instance retrieved from cache');\n  }\n\n  return result;\n}\n\nfunction setCached(realm: Realm) {\n  (globalThis as any).__BUNYAMIN__ = realm;\n  return realm;\n}\n\nexport default setCached(getCached() ?? create());\n","import { isUndefined } from '../../../utils';\n\nconst NIL = Symbol('NIL');\n\nexport class ThreadDispatcher {\n  readonly #stacks: number[] = [];\n  readonly #threads: unknown[] = [];\n  readonly #countMax: number;\n\n  constructor(\n    public readonly name: string,\n    public readonly strict: boolean,\n    public readonly min: number,\n    public readonly max: number,\n  ) {\n    this.#countMax = max - min + 1;\n  }\n\n  begin(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    this.#threads[tid] = id;\n    this.#stacks[tid] = (this.#stacks[tid] || 0) + 1;\n\n    return this.#transposeTID(tid);\n  }\n\n  resolve(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    return this.#transposeTID(tid);\n  }\n\n  end(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    if (this.#stacks[tid] && --this.#stacks[tid] === 0) {\n      delete this.#threads[tid];\n    }\n\n    return this.#transposeTID(tid);\n  }\n\n  #findTID(id: unknown): number {\n    let tid = this.#threads.indexOf(id);\n    if (tid === -1) {\n      // Try to find a recently released slot in the array:\n      tid = this.#threads.findIndex(isUndefined);\n    }\n\n    if (tid === -1) {\n      tid = this.#threads.length;\n    }\n\n    return tid < this.#countMax ? tid : -1;\n  }\n\n  #transposeTID(tid: number): number {\n    return this.min + tid;\n  }\n\n  #error(): number | Error {\n    const count = this.#countMax;\n    const threads = count > 1 ? `threads` : `thread`;\n\n    return this.strict\n      ? new Error(`Exceeded limit of ${count} concurrent ${threads} in group \"${this.name}\"`)\n      : this.max;\n  }\n}\n","import IntervalTree from '@flatten-js/interval-tree';\n\nimport type { ThreadAlias, ThreadID } from '../../../types';\nimport { ThreadDispatcher } from './ThreadDispatcher';\nimport type { ThreadGroupConfig } from './ThreadGroupConfig';\n\nexport type ThreadGroupDispatcherConfig = {\n  defaultThreadName: string;\n  maxConcurrency: number;\n  strict: boolean;\n};\n\nexport class ThreadGroupDispatcher {\n  readonly #strict: boolean;\n  readonly #dispatchers: Record<string, ThreadDispatcher> = {};\n  readonly #maxConcurrency: number;\n  readonly #defaultThreadName: string;\n  readonly #names: IntervalTree = new IntervalTree();\n\n  #freeThreadId = 1;\n\n  constructor(options: ThreadGroupDispatcherConfig) {\n    this.#defaultThreadName = options.defaultThreadName;\n    this.#maxConcurrency = options.maxConcurrency;\n    this.#strict = options.strict;\n  }\n\n  registerThreadGroup(config: ThreadGroupConfig): this {\n    const maxConcurrency = config.maxConcurrency ?? this.#maxConcurrency;\n    const min = this.#freeThreadId;\n    const max = min + maxConcurrency - 1;\n\n    this.#dispatchers[config.id] = new ThreadDispatcher(config.displayName, this.#strict, min, max);\n    this.#names.insert([min, max], config.displayName);\n    this.#freeThreadId = max + 1;\n\n    return this;\n  }\n\n  name(tid: number): string | undefined {\n    if (tid === 0) {\n      return this.#defaultThreadName;\n    }\n\n    return this.#names.search([tid, tid])[0];\n  }\n\n  resolve(ph: string | undefined, tid: ThreadID | undefined): number | Error {\n    if (tid == null) {\n      return 0;\n    }\n\n    if (typeof tid === 'number') {\n      return tid;\n    }\n\n    const dispatcher = this.#resolveDispatcher(tid as ThreadAlias);\n    if (!dispatcher) {\n      return new Error(`Unknown thread group \"${this.#resolveAlias(tid)}\"`);\n    }\n\n    const id = this.#resolveId(tid);\n\n    switch (ph) {\n      case 'B': {\n        return dispatcher.begin(id);\n      }\n      case 'E': {\n        return dispatcher.end(id);\n      }\n      default: {\n        return dispatcher.resolve(id);\n      }\n    }\n  }\n\n  #resolveDispatcher(threadAlias: ThreadAlias): ThreadDispatcher {\n    const groupName = typeof threadAlias === 'string' ? threadAlias : threadAlias[0];\n    return this.#ensureGroupDispatcher(groupName);\n  }\n\n  #resolveAlias(threadAlias: ThreadAlias | undefined): unknown {\n    return Array.isArray(threadAlias) ? threadAlias[0] : threadAlias;\n  }\n\n  #resolveId(threadAlias: ThreadAlias | undefined): unknown {\n    return threadAlias === undefined || typeof threadAlias === 'string'\n      ? undefined\n      : threadAlias[1];\n  }\n\n  #ensureGroupDispatcher(threadGroup: string): ThreadDispatcher {\n    if (!this.#dispatchers[threadGroup] && !this.#strict) {\n      this.registerThreadGroup({ id: threadGroup, displayName: threadGroup });\n    }\n\n    return this.#dispatchers[threadGroup];\n  }\n}\n","/* eslint-disable unicorn/switch-case-braces,unicorn/prevent-abbreviations,@typescript-eslint/no-explicit-any*/\nimport type {\n  AsyncEvent,\n  CompleteEvent,\n  CounterEvent,\n  DurationBeginEvent,\n  DurationEndEvent,\n  Event,\n  EventWithStack,\n  InstantEvent,\n  MetadataEvent,\n} from 'trace-event-lib';\n\n// TODO: optimize args - they will be often empty objects\n\nexport function bunyan2trace(record: any): Event {\n  if (!record.ph) {\n    return buildFallbackEvent(record);\n  }\n\n  switch (record.ph) {\n    case 'B':\n      return buildDurationBeginEvent(record);\n    case 'E':\n      return buildDurationEndEvent(record);\n    case 'i':\n      return buildInstantEvent(record);\n    case 'b':\n    case 'e':\n    case 'n':\n      return buildAsyncEvent(record);\n    case 'X':\n      return buildCompleteEvent(record);\n    case 'C':\n      return buildCounterEvent(record);\n    case 'M':\n      return buildMetadataEvent(record);\n    default:\n      return buildFallbackEvent(record);\n  }\n}\n\nfunction buildAsyncEvent(record: any): AsyncEvent {\n  const event = bunyan2trace(record) as AsyncEvent;\n  return moveProperties(event.args!, event, ['id', 'id2', 'scope']);\n}\n\nfunction buildCompleteEvent(record: any): CompleteEvent {\n  const event = extractEventWithStack(record) as CompleteEvent;\n  return moveProperties(event.args!, event, ['dur', 'tdur', 'esf', 'estack']);\n}\n\nfunction buildCounterEvent(record: any): CounterEvent {\n  const event = bunyan2trace(record) as CounterEvent;\n  delete event.cat;\n  return moveProperties(event.args!, event, ['id']);\n}\n\nfunction buildDurationBeginEvent(record: any): DurationBeginEvent {\n  return extractEventWithStack(record) as DurationBeginEvent;\n}\n\nfunction buildDurationEndEvent(record: any): DurationEndEvent {\n  const event = extractEventWithStack(record) as DurationEndEvent;\n  delete event.name;\n  delete event.cat;\n  return event;\n}\n\nfunction buildMetadataEvent(record: any): MetadataEvent {\n  const event = bunyan2trace(record) as MetadataEvent;\n  delete event.cat;\n  return event;\n}\n\nfunction buildInstantEvent(record: any): InstantEvent {\n  const event = extractEventWithStack(record) as InstantEvent;\n  const args = moveProperties(event.args!, event, ['s']);\n  if (args.s === 'g' || args.s === 'p') {\n    delete event.sf;\n    delete event.stack;\n  }\n\n  return event;\n}\n\nfunction buildFallbackEvent(record: any): InstantEvent {\n  const event = buildInstantEvent(record);\n  event.ph = 'i';\n  return event;\n}\n\nfunction extractTraceEvent(record: any): Event {\n  const {\n    cat,\n    cname,\n    ph,\n    tts,\n    pid,\n    tid,\n    time,\n    msg: name,\n    name: _processName,\n    hostname: _hostname,\n    ...args\n  } = record;\n\n  const ts = new Date(time).getTime() * 1e3;\n\n  return {\n    cat,\n    cname,\n    ph,\n    ts,\n    tts,\n    pid,\n    tid,\n    name,\n    args,\n  } as Event;\n}\n\nfunction extractEventWithStack(record: any): EventWithStack {\n  const event = extractTraceEvent(record) as EventWithStack;\n  return moveProperties(event.args!, event, ['sf', 'stack']);\n}\n\nfunction moveProperties<T extends Record<string, any>>(\n  source: Record<string, any>,\n  target: T,\n  keys: (keyof T)[],\n): T {\n  for (const key of keys) {\n    if (source[key as string] !== undefined) {\n      target[key] = source[key as string];\n      delete source[key as string];\n    }\n  }\n\n  return target;\n}\n","import type { Event } from 'trace-event-lib';\nimport * as TEL from 'trace-event-lib';\nimport type { Transform } from 'node:stream';\n\nexport class StreamEventBuilder extends TEL.AbstractEventBuilder {\n  constructor(protected readonly stream: Transform) {\n    super();\n  }\n\n  public send(event: Event) {\n    this.stream.push(event);\n  }\n}\n","import type { TraceEventStreamOptions } from './TraceEventStreamOptions';\nimport type { ThreadGroupConfig } from '../threads';\n\nexport function normalizeOptions(\n  options: TraceEventStreamOptions,\n): Required<TraceEventStreamOptions> {\n  options.ignoreFields = options.ignoreFields ?? ['v', 'hostname', 'level', 'name'];\n  options.defaultThreadName = options.defaultThreadName ?? 'Main Thread';\n  options.maxConcurrency = options.maxConcurrency ?? 100;\n  options.strict = options.strict ?? false;\n  options.threadGroups = [...(options.threadGroups ?? [])].map((threadGroup, index) =>\n    typeof threadGroup === 'string'\n      ? {\n          id: threadGroup,\n          displayName: threadGroup,\n        }\n      : validateThreadGroup(threadGroup, index),\n  );\n\n  if (options.maxConcurrency < 1) {\n    throw new Error(`maxConcurrency must be at least 1, got ${options.maxConcurrency}`);\n  }\n\n  return options as Required<TraceEventStreamOptions>;\n}\n\nfunction validateThreadGroup(threadGroup: ThreadGroupConfig, index: number) {\n  if (!threadGroup.id) {\n    throw new Error('Missing thread group ID in thread group at index ' + index);\n  }\n\n  if (threadGroup.maxConcurrency != null) {\n    if (threadGroup.maxConcurrency < 1) {\n      throw new Error(\n        `Max concurrency (${threadGroup.id} -> ${threadGroup.maxConcurrency}) has to be a positive integer`,\n      );\n    }\n\n    if (threadGroup.maxConcurrency > 1e6) {\n      throw new Error(\n        `Max concurrency (${threadGroup.id} -> ${threadGroup.maxConcurrency}) cannot be greater than 1,000,000`,\n      );\n    }\n  }\n\n  return threadGroup;\n}\n","import { Transform } from 'node:stream';\n\nimport { isError } from '../../utils';\n\nimport { ThreadGroupDispatcher } from './threads';\nimport type { ThreadGroupConfig } from './threads';\nimport { bunyan2trace } from './bunyan2trace';\nimport { StreamEventBuilder } from './StreamEventBuilder';\nimport type { TraceEventStreamOptions } from './options/TraceEventStreamOptions';\nimport { normalizeOptions } from './options/normalizeOptions';\n\n// TODO: add tests\nexport class BunyanTraceEventStream extends Transform {\n  readonly #knownTids = new Set<number>();\n  readonly #threadGroupDispatcher: ThreadGroupDispatcher;\n  readonly #builder = new StreamEventBuilder(this);\n  readonly #ignoreFields: string[];\n\n  #started = false;\n\n  constructor(userOptions: TraceEventStreamOptions = {}) {\n    super({ objectMode: true });\n\n    const options = normalizeOptions(userOptions);\n    this.#ignoreFields = options.ignoreFields;\n    this.#threadGroupDispatcher = new ThreadGroupDispatcher({\n      strict: options.strict ?? false,\n      defaultThreadName: options.defaultThreadName ?? 'Main Thread',\n      maxConcurrency: options.maxConcurrency ?? 100,\n    });\n\n    for (const threadGroup of options.threadGroups) {\n      this.#threadGroupDispatcher.registerThreadGroup(threadGroup as ThreadGroupConfig);\n    }\n  }\n\n  _transform(\n    record: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    const json = typeof record === 'string' ? JSON.parse(record) : record;\n    const event = json && bunyan2trace(json);\n\n    if (event.args) {\n      for (const field of this.#ignoreFields) {\n        delete event.args[field];\n      }\n    }\n\n    if (!this.#started) {\n      this.#started = true;\n      this.#builder.metadata({\n        pid: event.pid,\n        ts: event.ts,\n        name: 'process_name',\n        args: { name: json.name },\n      });\n    }\n\n    const tid = (event.tid = this.#threadGroupDispatcher.resolve(event.ph, event.tid));\n    if (isError(tid)) {\n      callback(tid);\n      return;\n    }\n\n    if (!this.#knownTids.has(tid)) {\n      this.#knownTids.add(tid);\n\n      const threadName = this.#threadGroupDispatcher.name(tid);\n      if (threadName) {\n        this.#builder.metadata({\n          pid: event.pid,\n          tid: event.tid,\n          ts: event.ts,\n          name: 'thread_name',\n          args: { name: threadName },\n        });\n      }\n    }\n\n    this.#builder.send(event);\n    callback(null);\n  }\n}\n","import fs from 'node:fs';\nimport type { Readable } from 'node:stream';\nimport { Transform } from 'node:stream';\n// eslint-disable-next-line import/extensions\nimport StreamArray from 'stream-json/streamers/StreamArray.js';\n\nexport function jsonlReadFile(filePath: string): Readable {\n  return fs\n    .createReadStream(filePath, { encoding: 'utf8' })\n    .pipe(StreamArray.withParser())\n    .pipe(new MapValues(filePath));\n}\n\nclass MapValues extends Transform {\n  constructor(protected readonly filePath: string) {\n    super({ objectMode: true });\n  }\n\n  _transform(\n    record: any,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    this.push({\n      ...record,\n      filePath: this.filePath,\n    } as JSONLEntry);\n\n    callback();\n  }\n}\n\nexport type JSONLEntry<T = unknown> = {\n  filePath: string;\n  key: number;\n  value: T;\n};\n","import fs from 'node:fs';\nimport { Writable } from 'node:stream';\n\nexport function jsonlWriteFile(filePath: string): Writable {\n  return new JSONLFileStream({ filePath });\n}\n\ntype JSONLFileStreamOptions = {\n  filePath: string;\n};\n\ntype ErrorCallback = (error?: Error | null) => void;\n\n// Custom writable stream to append JSON objects\nclass JSONLFileStream extends Writable {\n  private readonly _filePath: string;\n  private _fileDescriptor = Number.NaN;\n  private _offset = Number.NaN;\n  private _counter = 0;\n\n  constructor(options: JSONLFileStreamOptions) {\n    super({ objectMode: true });\n\n    this._filePath = options.filePath;\n  }\n\n  _construct(callback: ErrorCallback) {\n    this._offset = 0;\n    this._fileDescriptor = fs.openSync(this._filePath, 'wx');\n\n    const content = Buffer.from('[]\\n');\n    fs.write(this._fileDescriptor, content, this._offset, content.length, (error) => {\n      if (error) {\n        callback(error);\n      } else {\n        this._offset += 1;\n        callback();\n      }\n    });\n  }\n\n  _write(chunk: unknown, _: unknown, callback: ErrorCallback) {\n    const content =\n      this._counter++ > 0 ? `,\\n${JSON.stringify(chunk)}]\\n` : `${JSON.stringify(chunk)}]\\n`;\n    const buffer = Buffer.from(content);\n\n    fs.write(\n      this._fileDescriptor,\n      buffer,\n      0,\n      buffer.length,\n      this._offset,\n      (error: Error | null, bytesWritten: number) => {\n        if (error) {\n          callback(error);\n        } else {\n          this._offset += bytesWritten - 2;\n          callback();\n        }\n      },\n    );\n  }\n\n  _final(callback: ErrorCallback) {\n    fs.close(this._fileDescriptor, callback);\n  }\n}\n","import type { LeafNode, TreeNode } from './TreeNode';\n\nexport class ArrayTreeNode<Value = unknown, ChildNode extends LeafNode<any> = LeafNode>\n  implements TreeNode<Value, ChildNode>\n{\n  index = -1;\n  parent?: TreeNode<any, this>;\n\n  readonly #children: ChildNode[] = [];\n  readonly #map = new Map<unknown, ChildNode>();\n\n  constructor(public value: Value) {}\n\n  get size() {\n    return this.#children.length;\n  }\n\n  [Symbol.iterator]() {\n    return this.#children[Symbol.iterator]();\n  }\n\n  findByValue(value: unknown): ChildNode | undefined {\n    return this.#map.get(value);\n  }\n\n  appendChild(node: ChildNode): ChildNode {\n    node.index = this.size;\n    node.parent = this as TreeNode;\n    this.#children.push(node);\n    this.#map.set(node.value, node);\n    return node;\n  }\n}\n","import type { LeafNode, TreeNode } from './TreeNode';\n\nexport class RangeTreeNode<Value> implements LeafNode<Value> {\n  index = -1;\n  parent?: TreeNode<any, this>;\n\n  #min = Number.POSITIVE_INFINITY;\n  #max = Number.NEGATIVE_INFINITY;\n\n  constructor(public value: Value) {}\n\n  get min() {\n    return this.#min;\n  }\n\n  get max() {\n    return this.#max;\n  }\n\n  get size() {\n    return this.#max - this.#min + 1;\n  }\n\n  protected add(child: number) {\n    if (child < this.#min) {\n      this.#min = child;\n    }\n    if (child > this.#max) {\n      this.#max = child;\n    }\n  }\n}\n","import { RangeTreeNode } from '../abstract';\n\nexport class FileNode extends RangeTreeNode<string> {\n  rank?: number;\n  offset?: number;\n\n  addTID(tid: number): void {\n    return super.add(tid);\n  }\n\n  transpose(tid: number): number {\n    if (tid < this.min || tid > this.max) {\n      throw new Error(`Value ${tid} not found in range: [${this.min}, ${this.max}]`);\n    }\n\n    return (this.offset ?? 0) + (tid - this.min);\n  }\n}\n","import { ArrayTreeNode } from '../abstract';\nimport { FileNode } from './FileNode';\n\nexport class PIDNode extends ArrayTreeNode<number, FileNode> {\n  addFile(file: string): FileNode {\n    /* eslint-disable-next-line unicorn/prefer-dom-node-append */\n    return this.findByValue(file) ?? this.appendChild(new FileNode(file));\n  }\n}\n","import { ArrayTreeNode } from '../abstract';\nimport { PIDNode } from './PIDNode';\n\nexport class RootNode extends ArrayTreeNode<never, PIDNode> {\n  constructor() {\n    super(undefined as never);\n  }\n\n  addPID(pid: number): PIDNode {\n    /* eslint-disable-next-line unicorn/prefer-dom-node-append */\n    return this.findByValue(pid) ?? this.appendChild(new PIDNode(pid));\n  }\n\n  rank() {\n    let index = 0;\n    let offset = 0;\n\n    for (const pid of this) {\n      for (const file of pid) {\n        file.rank = index++;\n        file.offset = offset;\n        offset += file.size;\n      }\n    }\n  }\n}\n","import { RootNode } from './tree';\nimport type { Resolver } from './Resolver';\n\nexport class PIDResolver implements Resolver {\n  protected tree = new RootNode();\n\n  add(pid: number, _filePath: string, tid: number) {\n    this.tree.addPID(pid).addFile('').addTID(tid);\n  }\n\n  finalize() {\n    this.tree.rank();\n  }\n\n  resolvePid(_filePath: string, pid: number): number {\n    return pid;\n  }\n\n  resolveTid(_filePath: string, pid: number, tid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue('');\n    return $file?.transpose(tid) ?? Number.NaN;\n  }\n}\n","import { PIDResolver } from './PIDResolver';\n\nexport class FilePIDResolver extends PIDResolver {\n  add(pid: number, filePath: string, tid: number) {\n    this.tree.addPID(pid).addFile(filePath).addTID(tid);\n  }\n\n  resolvePid(filePath: string, pid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue(filePath);\n    return ($file?.rank ?? Number.NaN) + 1;\n  }\n\n  resolveTid(filePath: string, pid: number, tid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue(filePath);\n    return $file?.transpose(tid) ?? Number.NaN;\n  }\n}\n","import type { Readable } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\nimport multiSortStream from 'multi-sort-stream';\n\nimport type { JSONLEntry } from '../../jsonl';\n\nexport function multisort(streams: Readable[]): Readable {\n  return multiSortStream(streams, comparator);\n}\n\nfunction comparator(a: unknown, b: unknown): number {\n  const { value: aa } = a as JSONLEntry<TraceEvent>;\n  const { value: bb } = b as JSONLEntry<TraceEvent>;\n\n  return aa.ts < bb.ts ? -1 : aa.ts > bb.ts ? 1 : 0;\n}\n","import { Writable } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\nimport type { Resolver } from '../resolvers';\nimport type { JSONLEntry } from '../../jsonl';\n\nexport class TraceAnalyze extends Writable {\n  readonly #resolver: Resolver;\n\n  constructor(resolver: Resolver) {\n    super({\n      objectMode: true,\n      highWaterMark: Number.MAX_SAFE_INTEGER,\n    });\n\n    this.#resolver = resolver;\n  }\n\n  _write(\n    chunk: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    const entry = chunk as JSONLEntry<TraceEvent>;\n    this.#resolver.add(entry.value.pid, entry.filePath, entry.value.tid);\n    callback();\n  }\n\n  _final(callback: (error?: Error | null) => void) {\n    this.#resolver.finalize();\n    callback();\n  }\n}\n","import { Transform } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\n\nimport type { Resolver } from '../resolvers';\nimport type { JSONLEntry } from '../../jsonl';\n\nexport class TraceMerge extends Transform {\n  readonly #resolverPromise: Promise<Resolver>;\n  #resolver?: Resolver;\n\n  constructor(resolverPromise: Promise<Resolver>) {\n    super({\n      objectMode: true,\n      highWaterMark: Number.MAX_SAFE_INTEGER,\n    });\n\n    this.#resolverPromise = resolverPromise;\n  }\n\n  _transform(\n    chunk: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    if (this.#resolver) {\n      const entry = chunk as JSONLEntry<TraceEvent>;\n      const output = { ...entry.value };\n      if (output.pid != null) {\n        output.pid = this.#resolver.resolvePid(entry.filePath, entry.value.pid);\n      }\n      if (output.tid != null) {\n        output.tid = this.#resolver.resolveTid(entry.filePath, entry.value.pid, entry.value.tid);\n      }\n      this.push(output);\n      callback();\n    } else {\n      this.#resolverPromise.then(\n        (resolver) => {\n          this.#resolver = resolver;\n          this._transform(chunk, _encoding, callback);\n        },\n        (error) => {\n          callback(error);\n        },\n      );\n    }\n  }\n}\n","import type { Readable } from 'node:stream';\n\nimport { jsonlReadFile } from '../jsonl';\nimport type { Resolver } from './resolvers';\nimport { FilePIDResolver, PIDResolver } from './resolvers';\nimport { multisort, TraceAnalyze, TraceMerge } from './transforms';\n\nexport type TraceMergeOptions = {\n  mode: 'pid' | 'fpid';\n};\n\nexport function traceMerge(filePaths: string[], options?: TraceMergeOptions): Readable {\n  const streams = filePaths.map((filePath) => jsonlReadFile(filePath));\n  const resolver = makeResolver(options);\n  const $resolver = makeDeferred<Resolver>();\n  const analyze = new TraceAnalyze(resolver)\n    .on('error', (error) => $resolver.reject(error))\n    .on('finish', () => $resolver.resolve(resolver));\n\n  const merge = new TraceMerge($resolver.promise);\n\n  const sorted = multisort(streams);\n  sorted.pipe(analyze);\n  return sorted.pipe(merge);\n}\n\nfunction makeResolver(options?: TraceMergeOptions): Resolver {\n  return options?.mode === 'fpid' ? new FilePIDResolver() : new PIDResolver();\n}\n\nfunction makeDeferred<T>() {\n  let resolve: (value: T) => void;\n  let reject: (reason?: unknown) => void;\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n\n  return {\n    promise: promise,\n    resolve: resolve!,\n    reject: reject!,\n  };\n}\n","import type { Transform } from 'node:stream';\nimport { BunyanTraceEventStream, jsonlWriteFile } from './streams';\nimport type { TraceEventStreamOptions } from './streams';\n\nexport function traceEventStream(\n  options: TraceEventStreamOptions & { filePath: string },\n): Transform {\n  const jsonl = jsonlWriteFile(options.filePath);\n  const stream = new BunyanTraceEventStream(options);\n  stream.pipe(jsonl);\n  return stream;\n}\n","import type { Readable } from 'node:stream';\nimport type { TraceMergeOptions } from './streams';\nimport { jsonlWriteFile, traceMerge } from './streams';\n\nexport function uniteTraceEvents(sourcePaths: string[], options?: TraceMergeOptions): Readable {\n  return traceMerge(sourcePaths, options);\n}\n\nexport async function uniteTraceEventsToFile(\n  sourcePaths: string[],\n  destinationPath: string,\n  options?: TraceMergeOptions,\n) {\n  return new Promise((resolve, reject) => {\n    uniteTraceEvents(sourcePaths, options)\n      .pipe(jsonlWriteFile(destinationPath))\n      .on('finish', resolve)\n      .on('error', reject);\n  });\n}\n","import type { BunyaminConfig, BunyanLikeLogger } from './decorator';\nimport { Bunyamin } from './decorator';\n\nexport type * from './decorator';\n\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  options: BunyaminConfig<Logger>,\n): Bunyamin<Logger>;\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  logger: Logger,\n  options?: Omit<BunyaminConfig<Logger>, 'logger'>,\n): Bunyamin<Logger>;\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  maybeLogger: any,\n  maybeConfig?: unknown,\n): Bunyamin<Logger> {\n  const logger = (maybeLogger.logger ?? maybeLogger) as Logger;\n  const config = (logger === maybeLogger ? maybeConfig : maybeLogger) as\n    | BunyaminConfig<Logger>\n    | undefined;\n\n  return new Bunyamin({\n    ...config,\n    logger,\n  });\n}\n","import realm from './realm';\n\nexport * from './noopLogger';\nexport * from './traceEventStream';\nexport * from './uniteTraceEvents';\nexport * from './wrapLogger';\nexport { isDebug } from './is-debug';\n\nexport const bunyamin = realm.bunyamin;\nexport const nobunyamin = realm.nobunyamin;\nexport const threadGroups = realm.threadGroups;\n\nexport default bunyamin;\n"],"names":["deflateCategories","cat","undefined","Array","isArray","filter","Boolean","join","String","inflateCategories","split","mergeCategories","left","right","iright","categories","uniqueCategories","Set","values","createIsDebug","namespaces","skips","names","part","destination","pattern","replace","push","RegExp","isDebug","name","length","some","regex","test","process","env","DEBUG","isSelfDebug","isActionable","value","isError","Error","isPromiseLike","maybePromise","then","isObject","isUndefined","x","MessageStack","constructor","options","_options$noBeginMessa","Object","defineProperty","_ensureStack","_ensureStack2","_simple","writable","Map","_complex","_noBeginMessage","_classPrivateFieldLooseBase","noBeginMessage","tid","message","stack","pop","_stack$pop","has","set","get","alias","subtid","submap","StackTraceError","empty","_fields","_classPrivateFieldLooseKey","_shared","_setupLogMethod","_begin","_beginInternal","_end","_endInternal","_instant","_complete","_completeInternal","_resolveLogEntry","_mergeFields","_transformContext","_resolveFields","Bunyamin","shared","fields","_resolveFields2","_transformContext2","_mergeFields2","_resolveLogEntry2","_completeInternal2","_complete2","_instant2","_endInternal2","_end2","_beginInternal2","_begin2","_setupLogMethod2","fatal","error","warn","info","debug","trace","config","loggerPriority","messageStack","threadGroups","logger","useLogger","priority","immutable","currentPriority","child","overrides","childContext","level","logMethod","bind","assign","begin","complete","end","arguments_","entry","customMessage","beginMessage","maybeContext","maybeMessage","maybeAction","action","customContext","endContext","ph","result","success","err","phase","userContext","slice","maybeError","transformFields","noop","NoopLogger","noopLogger","_options","_bunyamin","_debugMode","_groups","_logAddition","_Symbol$iterator","Symbol","iterator","ThreadGroups","bunyamin","_logAddition2","add","group","id","displayName","create","selfDebug","nobunyamin","getCached","globalThis","__BUNYAMIN__","setCached","realm","_getCached","NIL","_stacks","_threads","_countMax","_findTID","_transposeTID","_error","ThreadDispatcher","strict","min","max","_error2","_transposeTID2","_findTID2","resolve","indexOf","findIndex","count","threads","_strict","_dispatchers","_maxConcurrency","_defaultThreadName","_names","_freeThreadId","_resolveDispatcher","_resolveAlias","_resolveId","_ensureGroupDispatcher","ThreadGroupDispatcher","_ensureGroupDispatcher2","_resolveId2","_resolveAlias2","_resolveDispatcher2","IntervalTree","defaultThreadName","maxConcurrency","registerThreadGroup","_config$maxConcurrenc","insert","search","dispatcher","threadAlias","groupName","threadGroup","bunyan2trace","record","buildFallbackEvent","buildDurationBeginEvent","buildDurationEndEvent","buildInstantEvent","buildAsyncEvent","buildCompleteEvent","buildCounterEvent","buildMetadataEvent","event","moveProperties","args","extractEventWithStack","s","sf","extractTraceEvent","cname","tts","pid","time","msg","_processName","hostname","_hostname","ts","Date","getTime","source","target","keys","key","StreamEventBuilder","TEL","AbstractEventBuilder","stream","send","normalizeOptions","_options$ignoreFields","_options$defaultThrea","_options$maxConcurren","_options$strict","_options$threadGroups","ignoreFields","map","index","validateThreadGroup","_knownTids","_threadGroupDispatcher","_builder","_ignoreFields","_started","BunyanTraceEventStream","Transform","userOptions","objectMode","_transform","_encoding","callback","json","JSON","parse","field","metadata","threadName","jsonlReadFile","filePath","fs","createReadStream","encoding","pipe","StreamArray","withParser","MapValues","jsonlWriteFile","JSONLFileStream","Writable","_filePath","_fileDescriptor","Number","NaN","_offset","_counter","_construct","openSync","content","Buffer","from","write","_write","chunk","_","stringify","buffer","bytesWritten","_final","close","ArrayTreeNode","parent","_children","_map","size","findByValue","appendChild","node","RangeTreeNode","_min","POSITIVE_INFINITY","_max","NEGATIVE_INFINITY","FileNode","rank","offset","addTID","transpose","_this$offset","PIDNode","addFile","file","_this$findByValue","RootNode","addPID","PIDResolver","tree","finalize","resolvePid","resolveTid","_$file$transpose","$pid","$file","FilePIDResolver","_$file$rank","multisort","streams","multiSortStream","comparator","a","b","aa","bb","_resolver","TraceAnalyze","resolver","highWaterMark","MAX_SAFE_INTEGER","_resolverPromise","TraceMerge","resolverPromise","output","traceMerge","filePaths","makeResolver","$resolver","makeDeferred","analyze","on","reject","merge","promise","sorted","mode","Promise","_resolve","_reject","traceEventStream","jsonl","uniteTraceEvents","sourcePaths","uniteTraceEventsToFile","destinationPath","wrapLogger","maybeLogger","maybeConfig","_maybeLogger$logger"],"mappings":"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"}